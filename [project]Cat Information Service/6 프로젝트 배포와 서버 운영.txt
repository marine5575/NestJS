[6-1 AWS 클라우드 컴퓨팅 & S3 구축]
s3 => 대략 구글 drive라고 생각하면 됨

[6-2 Multer + S3 연동]
nestjs-multer-extended => s3에 파일 업로드할 수 있도록 도와주는 lib
multer-s3, aws sdk를 이용해서 연결할 수도 있음
nestjs-multer-extended는 nestJS 버전 7까지만 지원

[6-3 (보충강의) AWS-SDK를 사용하여 S3에 업로드]
nest에서 webpack을 이용해서 hot-reload 사용할 수 있지만 지금은 살짝 이슈 있음
configService에 환경변수가 저장되어 있음 => 의존성 주입하면 사용할 수 있는 것!
이미지 자체를 변환하고 싶음 => sharp 패키지 사용

[6-4 AWS 클라우드 VPS 구축 & PM2로 서버 운영하기]
1. Pm2 설치 https://github.com/Unitech/pm2
- npm i pm2 -g
- pm2 list
- package.json 수정, .env MODE=‘prod’로 수정, PORT=80으로 수정
- npm run start:debug 
- npm run build
- npm run start:prod
- pm2 list
- pm2 kill

2. github에 코드 올리기
- https://github.com/amamov/gits
- .env는 .gitignore에 추가해서 올리기
- dist만 따로 빼서

3. VPS : 가상 사설 서버 구축
- AWS Lightsail 사용 
- 인스턴스 생성
- ssh를 사용하여 연결
- sudo apt-get update 
- sudo apt-get -y upgrade
- sudo apt-get install build-essential
- sudo apt-get install curl
- curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash --
- sudo apt-get install -y nodejs
- sudo apt-get install git
- sudo apt-get install vim
- touch .gitconfig
- git config --global user.name <유저이름>
-  git config --global user.email <유저이메일>
-  git config --global --list
- git clone <프로젝트>
- cd <프로젝트>
- npm i
- sudo npm i -g @nestjs/cli
- sudo npm i -g pm2
- vi .env (환경변수 붙여 넣기)
- sudo npm run start:prod

4. 고정 퍼블릭 주소 할당받기

5. 배포 성공!!!

nodeJS를 위한 프로세스 매니저
빌드 전에 debug 모드로 확인!
.env는 항상 .gitignore에 추가해두기!!
인스턴스: class가 있고 class 설계도를 기반으로 객체를 찍어냈을 때 그 객체
curl: 웹사이트에 접속해서 패키지를 다운받을 수 있게 함

소규모 프로젝트인 경우에는 문제가 되지 않지만 대규모 애플리케이션이라면 로드 벨런스는 필수!
=> docker 기반으로 프론트엔드 앱, 머신러닝 앱 api, 백엔드 앱 api, DB 이렇게 각각 컨테이너를 배포한다고 가정. 이 경우 nginx 컨테이너를 앞 단에 두어서 각각의 컨테이너에 대해 리버스 프록싱을 함. 또 각각 컨테이너들은 사용자의 트래픽이 다르기 때문에 로드 밸런스도 달아줌. 그리고 백엔드 앱 api를 pm2를 사용하여 프로세스를 생성해, 프로세스가 예상치 못하게 죽어서 생기는 서비스 장애를 막음.


[6-5 (보너스) 무료 도메인 등록]
도메인 생성 => AWS에 있는 "route 53"에서 보통 만듦
내도메인.한국 : https://xn--220b31d95hq8o.xn--3e0b707e/
porkbun: 가성비 좋은 dns 호스팅 관리 사이트