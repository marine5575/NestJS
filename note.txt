[4-1 NestJS 개발 환경 셋팅 & hello world!]
boiler-plate?
controller.spec => 컨트롤러 테스트
controller => express의 Route 파일 같은 역할
router.get('/', ...) -> @Get('/') getHello();
데코레이터(@): 함수나 클래스에 기능 첨가해줘서 재사용성 극대화
@get() === @Get('/')
데코레이터는 반드시 붙여써줘야 됨
서비스에서 비즈니스 로직 적어둠

[4-2 (보충) NestJS를 위한 VSCode 셋업 및 ESLint, Prettier]
eslint: JS와 TS의 코드를 검사해줌
.eslintrc.js => eslint의 검사 규칙을 적어놓은 것
production에서 console.log() 적는거 안 좋음
코드 convention을 보통 prettier, eslint 같은 곳에 적어둠
https://eslint.org/docs/rules/

[4-3 NestJS 구조 & Controller 패턴]
reflect-metadata: 데코레이터 문법 사용할 때 사용할 수 있는 패키지
rxjs: 비동기, 이벤트 기반 프로그래밍할 때 필요한 패키지
client가 req하면 controller가 받아서 res
nestJS는 모듈 단위로 동작
컨트롤러가 있는 endpt를 먼저 찾아가고 쭉 내려가면서 알맞은 endpt를 찾음
get에서도 endpoint 작성 가능
인자에도 데코레이터 패턴 사용해야됨
nestJS에서는 body를 직접 인자로 받을 수 있음
post 데코레이터 밑에 상태코드, 헤더 데코레이터 설정 가능
Body의 경우는 타입을 dto로 설정 => dto 안에서 body에 대한 validation 평가 가능. 필수적인 req, 악의적인 요청 거르기 가능
dto(Data Transfer Object)는 body에 대한 속성을 정의해줌

[4-4 Providers & 의존성 주입 (DI)]
DI(의존성 주입)
controller: 소비자 / (module에 있는 provider: 제품 제공) / 제품 사용
공급자(app.service)는 @Injection으로 의존성을 주입할 수 있음
nestJS는 의존성을 명료하게 코드에 남겨서 확실하게 의존성 관리 가능

[4-5 Modules & 캡슐화]
module 이름은 복수형으로 만들자
import를 하면 각 모듈에서 export한 서비스들을 controller가 appservice에서 사용 가능함
모듈은 기본적으로 캡슐화 함 => 개별 모듈에서 @module에 export 추가하면 외부에서도 사용 가능
캡슐화: 객체의 속성과 메서드를 하나로 묶고, 구현된 일부를 감추어 은닉함

[4-6 (보충) 캡슐화 추가 설명]
@module에 controller, provider 있으면 provider를 해당 controller가 사용할 수 있게 함 (중계임)
DI를 하려면 app.module의 provider에 있어야 함
그렇지만 provider에 계속 다른 모듈의 service를 추가하는 것은 좋지 않음 <- 관리 힘듦
=> 다른 모듈에서 접근할 수 있도록 export 해주는 것
provider에는 해당 모듈에서 자체적으로 만든 공급자들을 넣는 것이 good

[4-7 Nest Middleware]
미들웨어는 @Injection을 사용하여 DI가 가능
미들웨어는 @module에 들어가지 않고 그 밑에 있는 AppModule 클래스에 들어감 (NestModule 상속)
logger: 요청하는 대상에 대해서 어떤 대상이 어떤 것을 요청했는지 적어두는 미들웨어
.forRoutes('cats'): cats 라우터에 바인딩 시켜주는 것
nestJS는 로깅을 할 때 logger라는 클래스를 사용

[4-8 Exception filter & Pipes]
nestJS에서는 HTTP 관련 에러는 HttpException으로 처리
에러를 모아서 filter를 거쳐 내보내고 싶을 때 => exception.filter
미들웨어 -> 컨트롤러 -> 서비스 -> exception
pipe => 변환, 유효성 검사
인자로 넘겨 받은 변수의 형을 바꿀 수 있음 (e.g., '123' -> 123)
데코레이터에 filter를 설정하고 exception 발생했을 때 정보를 해당 filter에 넘김
key와 value가 같으면 생략 가능
nest 자체에서 처리해주는 error(e.g., 404)는 main.ts에 있는 app.useGlobalFilters 통해 수정 가능
