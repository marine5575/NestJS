[5-2 NestJS와 DB 연결하기, 환경 변수 설정]
.env를 사용하려면 process.env 사용하면 됨
모듈 안에서 환경변수를 사용하기 위해서는 import해줘야 사용할 수 있음

[5-3 DB 스키마, Controller 설계 & validation]
스키마에서 class validation 필요 => class-validator 라이브러리!

[5-4 회원가입 서비스 개발 & DTO 패턴]
class validation 사용하려면 main에 app.useGlobalPipes()에 설정해줘야 작동함
DTO: 계층간 데이터 교환을 위한 객체. validation, typing 검사도 함
DTO에 class 사용하는 이유는 데코레이터 사용 & 상속을 통한 재사용성 증가
스키마를 서비스 안에 넣기 위해서는 DI 해줘야 됨 & 모듈에 스키마를 import 해줘야 됨
UnauthorizedException => 403 에러 반환
promise를 반환하면 await 해줘야 됨
mongoose는 virtual 필드 제공 => 실제로 db에 저장되는 필드는 아니지만 비즈니스 로직에서 사용할 수 있도록 제공해주는 필드

[5-5 NestJS와 fastify & 협업을 위한 API 문서 만들기, CORS 문제]
fastify는 express와 비슷한 framework
속도를 높일 필요가 있는 api는 fastify로 리팩토링하는게 good
@ApiOperation을 사용하면 api 문서에 설명 붙일 수 있음
@ApiProperty를 설정하면 api body 예제 붙일 수 있음
PickType을 사용하면 class에서 필요한 부분만 가져올 수 있음
OmitType을 사용하면 class에서 필요없는 부분만 빼고 가갈 수 있음
CORS error => 서비스 하고 있지 않은 사이트에서 의도치 않는 접근 방지

[5-6 Repository 패턴과 레이어 분리]
Repository 디자인패턴: service와 DB 사이에 중계자 역할을 하는 것
=> DB 접근하는 로직을 rep에 모아두면 service는 비즈니스 로직에 더 집중하고, 책임 분리 명확해짐
서비스 layer에서 데이터의 출처와 상관 없이 동일한 방식으로 접근할 수 있도록 하는 것
repo 패턴을 사용하면 비용적으로 안전
schema는 entity와 같음!!
