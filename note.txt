[7-2 서버 사이드 렌더링의 이해 (CSR vs SSR)]
SSR(Server Side Rendering): 서버에서 html로 렌더링해서 browser에 직접 전달
CSR(Client Side Rendering): 브라우저 자체에서 렌더링함

CSR => 서버에서 JS, CSS만 받아옴. 브라우저가 JS를 html로 렌더링하는 것
사용자 interaction이 많고 JS로 무엇인가를 많이 하려고 하면 CSR이 good
but CSR는 불안정함 (렌더링 속도가 느리면 빈 화면만 보게 됨)
한꺼번에 렌더링된 것을 볼 수 있으니까 SSR을 사용하는게 good
SSR => e.g., MDN


[7-3 MVC 패턴, 프로젝트 셋업]
MVC 패턴: SW 디자인패턴. 책임을 분리해서 나눈 패턴. "관심사의 분리". 하나의 SW 프로그램을 각각의 영역으로 분리한 것

모델: mongo DB, mongoose
뷰: HTML 파일, CSS, JS
컨트롤러: 사용자가 url로 들어왔을 때 어떤 걸 보여줄지 결정

템플릿엔진: HTML을 랜더링할 수 있는 엔진 (e.g., HVS)
useStaticAssets: JS, CSS 파일을 서빙
setBaseViewsDir: 템플릿 엔진 파일을 어디에 둘 것인지
HBS => HTML 파일에서 변수를 받을 수 있음


[7-4 HTTP vs Socket]
HTTP 연결 방식: 단방향 (req -> res). client가 req를 보내야 서버가 res를 보내줌
polling 방식: 단방향 연결이지만 계속해서 여러번 보내서 양방향 연결처럼 만듦
Socket 연결 방식: 양방향 
소켓은 like 콘센트
Gateway: dep injection 가능. injectable한 클래스
☆ emit => 보낸다 / on => 받는다 ☆
소켓 사용하려면 Socket.io라는 cdn 서비스 필요


[7-5 유니캐스팅 (Unicasting) : emit & on]
socket.emit(EVENT_NAME, DATA): 보내는 것 (client <-> 서버)
@MessageBody() => 어떤 data를 받을 것인지
@ConnectedSocket() => socket을 받음
소켓으로 보낼 때는 이벤트 등록을 해야 됨
새로고침을 하면 socket이 끊기고 새로운 socket을 부여 (id가 바뀌게 됨)
서버 자체는 client에 접속한 소켓 id를 가지고 유저를 식별 가능
socket.on() => data를 콜백함수로 받을 수 ok
client에서 emit으로 data를 보냈을 때, 서버에서 해당 data에 대한 처리를 마무리하고 결과를 return으로 emit함 => 호출했던 emit() 안에 있는 콜백함수로 불러올 수 있음

클라이언트에서 emit으로 서버에 데이터 전송
-> 서버에서 데이터를 받아 적절한 값으로 클라이언트에 전송 
-> 해당 데이터는 emit의 콜백으로 받을 수 있음


[7-6 네임스페이스의 이해와 Gateway 생명주기]
namespace: 공간이라는 의미. 각각의 공간에는 각각의 API가 존재
웹소켓을 날 것으로 사용하면 웹소켓 protocol로 사용됨
socket.io는 모든 브라우저에서 socket을 사용할 수 있게 하는 lib
웹소켓을 지원하지 않는 브라우저 有 => polling 방식으로 socket.io가 자동으로 처리하게 해줌
먼저 polling으로 두드린 후에 잘 작동하면, 웹소켓으로 소통함
서버에서 지정한 namespace로만 접속 가능
interface는 해당 class에서 반드시 구현해야하는 사양서, 규약

afterInit() => constructor 다음에 바로 실행되는 함수 [OnGatewayInit]
handleConnection() => client랑 연결이 되는 순간 실행되는 함수 [OnGatewayConnection]
handleDisconnect() => 연결이 끊길 때 발동되는 함수 [OnGatewayDisconnect]


[7-7 브로드캐스팅 (Broadcasting)]
브로드캐스팅: 연결된 모든 소켓 전체에 뿌려주는 것 (e.g., 연결된 모든 소켓들에게 새로운 접속자가 들어왔다는 것을 알려줌)
=> socket.broadcats.emit();


[7-8 이벤트 설계와 기본 서비스 로직 완성]
socket 프로그래밍에서 가장 중요한 것: 1. 이벤트 정의  2. 이벤트 설계
form에서 submit을 하면 event bubble 발생 (~= 새로고침)


